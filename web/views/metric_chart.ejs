<%- include('header'); %>
        <div class="container-fluid">

          <!-- Page Heading -->
          <h1 class="h3 mb-2 text-gray-800">Charts</h1>
          <p class="mb-4">Evolution of metric over last 120 days</p>

          <!-- DataTales Example -->
          <div class="card shadow mb-4">
            <div class="card-header py-3">
              <h6 class="m-0 font-weight-bold text-primary"><a href='/web/metrics'>Metric</a>: <%-name%></h6>
            </div>

            <div class="card-body">
              <div class="form-group">
                <form class="d-none d-sm-inline-block form-inline mr-auto ml-md-3 my-2 my-md-0 mw-100 navbar-search" action='/web/metrics/chart' method=post>
                  <div class="input-group">
                    <input type="hidden" name="_csrf" value="<%- csrfToken%>">
                    <input type="text" class="form-control bg-light border-0 small" placeholder="<%-name%>" aria-label="name" name='name'>
                    <div class="input-group-append">
                      <button class="btn btn-primary" type="submit">
                       <i class="fas fa-search fa-sm"></i>
                      </button>
                    </div>
                  </div>
                </form>
              </div>

            <div class="row">

              <!-- Area Chart -->
              <div class="col-xl col-lg">
                  <!-- Card Body -->
                  <div class="card-body">
                    <div class="chart-area">
                      <canvas id="metricChart"></canvas>
                    </div>
                  </div>
                </div>
            </div>

              <script src="/public/vendor/chart.js/Chart.min.js"></script>

              <!-- Page level custom scripts -->
              <script>
// Set new default font family and font color to mimic Bootstrap's default styling
Chart.defaults.global.defaultFontFamily = 'Nunito', '-apple-system,system-ui,BlinkMacSystemFont,"Segoe UI",Roboto,"Helvetica Neue",Arial,sans-serif';
Chart.defaults.global.defaultFontColor = '#858796';

function number_format(number, decimals, dec_point, thousands_sep) {
  // *     example: number_format(1234.56, 2, ',', ' ');
  // *     return: '1 234,56'
  number = (number + '').replace(',', '').replace(' ', '');
  var n = !isFinite(+number) ? 0 : +number,
    prec = !isFinite(+decimals) ? 0 : Math.abs(decimals),
    sep = (typeof thousands_sep === 'undefined') ? ',' : thousands_sep,
    dec = (typeof dec_point === 'undefined') ? '.' : dec_point,
    s = '',
    toFixedFix = function(n, prec) {
      var k = Math.pow(10, prec);
      return '' + Math.round(n * k) / k;
    };
  // Fix for IE parseFloat(0.55).toFixed(0) = 0;
  s = (prec ? toFixedFix(n, prec) : '' + Math.round(n)).split('.');
  if (s[0].length > 3) {
    s[0] = s[0].replace(/\B(?=(?:\d{3})+(?!\d))/g, sep);
  }
  if ((s[1] || '').length < prec) {
    s[1] = s[1] || '';
    s[1] += new Array(prec - s[1].length + 1).join('0');
  }
  return s.join(dec);
}

var data = <%-JSON.stringify(data)%>;

function getTimeLabels(){
  return data[0].map(function(i){ return i.t; });  
}

function getDataSets(){
  var datasets = [];

  console.log(data.length);

  for(var i=0; i < data.length; i++){
    datasets.push(
      {
        label: "Value " + i,
        lineTension: 0.3,
        backgroundColor: color_index[i], 
        borderColor: color_index[i], 
        pointRadius: 3,
        pointBackgroundColor: color_index[i],
        pointBorderColor: color_index[i], 
        pointHoverRadius: 3,
        pointHoverBackgroundColor: color_index[i], 
        pointHoverBorderColor: color_index[i],
        pointHitRadius: 10,
        pointBorderWidth: 2,
        data: data[i],
        fill: null
      }
    );
  }
  return datasets;
};

var colors = {
  red: 'rgb(255, 99, 132)',
  orange: 'rgb(255, 159, 64)',
  yellow: 'rgb(255, 205, 86)',
  green: 'rgb(75, 192, 192)',
  blue: 'rgb(54, 162, 235)',
  purple: 'rgb(153, 102, 255)',
  grey: 'rgb(201, 203, 207)'
};

var color_index = [colors.purple, colors.blue, colors.grey, colors.red, colors.orange];

var ctx = document.getElementById("metricChart");
var myLineChart = new Chart(ctx, {
  type: 'line',
  data: {
    labels: getTimeLabels(),
    datasets: getDataSets()
  },
  options: {
    maintainAspectRatio: false,
    layout: {
      padding: {
        left: 10,
        right: 25,
        top: 25,
        bottom: 0
      }
    },
    scales: {
      xAxes: [{
        // time: {
        //  unit: 'minutes'
        //},
        gridLines: {
          display: true,
          drawBorder: true
        },
        ticks: {
          maxTicksLimit: 20
        }
      }],
      yAxes: [{
        ticks: {
          maxTicksLimit: 5,
          padding: 10,
          callback: function(value, index, values) {
            return number_format(value, 1) + " <%-units.join('/')%>";
          }
        },
        scaleLabel: {
          display: true,
          labelString: "<%-units%>"
        },
        gridLines: {
          color: "rgb(234, 236, 244)",
          zeroLineColor: "rgb(234, 236, 244)",
          drawBorder: false,
          borderDash: [2],
          zeroLineBorderDash: [2]
        }
      }],
    },
    legend: {
      display: true
    },
    tooltips: {
      backgroundColor: "rgb(255,255,255)",
      bodyFontColor: "#858796",
      titleMarginBottom: 10,
      titleFontColor: '#6e707e',
      titleFontSize: 14,
      borderColor: '#dddfeb',
      borderWidth: 1,
      xPadding: 15,
      yPadding: 15,
      displayColors: false,
      intersect: false,
      mode: 'index',
      caretPadding: 10,
      callbacks: {
        label: function(tooltipItem, chart) {
          var units =  <%-JSON.stringify(units)%>;
          var datasetLabel = chart.datasets[tooltipItem.datasetIndex].label || '';
          return datasetLabel + ': ' + number_format(tooltipItem.yLabel, 1) + " " + units[tooltipItem.datasetIndex];
        }
      }
    }
  }
});
              </script>

            </div>
          </div>
        </div>
<%- include("footer"); %>